Begin with: http://ardupilot.org/dev/docs/building-setup-linux.html

checkout current SPAWARDev version (based on Arduplane-3.9.8)

after cloning you will have to update the submodules by:
-using https instead of git by $ git config --global url."https://".insteadOf git://
-or updating submodules off the RDT&E network as git://github.com seems to be blocked

Run the package installer script
$ /ardupilot/Tools/scripts/install-prereqs-ubuntu.sh
$ . ~/.profile
then log out and back in

then see Build.md, but specifically:

use board fmuv4 for the Pixracer board with ChibliOS:
$ ./waf configure --board fmuv4 
then
$ ./waf --targets bin/arduplane --upload to program the board via USB (dont forget the dialout permission fix)

building and running the software in the loop sim
from /ardupilot do:
$ ./waf clean
$ ./waf distclean
$ cd /ardupilot/ArduPlane (for plane)
$ ../Tools/autotest/sim_vehicle.py -w -D (this will configure waf, build arduplane for Linux in debuf mode -D, run the sim and reset the EEPROM settings -w) (Debug mode is necessary to avoid compile errors with some versions)
kill using Ctrl-C and rerun with
$ ../Tools/autotest/sim_vehicle.py -D --custom-location=32.70119,-117.25411,40,0 --frame=plane-elevon --add-param-file=../Greywing/SimSettings.param --out=udp:192.168.10.21:20003
(See advanced usage below for explination of sim_vehicle.py command line arguments)

Connect your GCS to TCP port 5762 or 5763 which emulates a mavlink serial connection


Using Flight Gear for payload video generation:
see: http://ardupilot.org/dev/docs/setting-up-sitl-on-linux.html

install flightgear:
$ sudo apt-get install flightgear
test that it runs normally:
$ fgfs

install high(er) resolution graphics:
download V2.0.1 scener from link here: https://www.flightgear.org/download/scenery/
unzip and copy to /usr/share/games/flightgear/Scenery/Objects and Terrain

open /Tools/autotest/fg_plane_view.sh and set --aircraft=ufo 
(this will remove all the overlay stuff)
$ ./fg_plane_view.sh
view->rendering options move performance-quality slider all the way to performance if app keeps segfaulting
flight gear must be started before simulator
start sim:
$ cd /ardupilot/ArduPlane
$ ../Tools/autotest/sim_vehicle.py -D --custom-location=32.70119,-117.25411,40,0

Advanced Usage:
-start simulator using a flying wing model. Note that this will also automatically reconfigure the autopilot nonvolatile parameters to use elevons
../Tools/autotest/sim_vehicle.py -D --frame=plane-elevon

-start sim at a custom location
../Tools/autotest/sim_vehicle.py -D --custom-location=32.70119,-117.25411,40,0
where 40 is the initial (ground) altitude (meters) and 0 is the initial heading (degrees)

-start sim with the useless & stupid map and console
../Tools/autotest/sim_vehicle.py -D --map --console

-start the simulator and load eeprom with the parameters from the supplied .param file. This is the same file that is generated by saving the downlinked parameters to a file in Mission planner
../Tools/autotest/sim_vehicle.py -D --add-param-file=/ardupilot/Greywing/SimSettings.param

-start the simulator with a specified UDP port add:
   --out=udp:192.168.10.21:20003












